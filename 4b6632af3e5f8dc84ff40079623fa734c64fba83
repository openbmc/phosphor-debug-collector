{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6e2a7148_4894d661",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-15T12:15:08Z",
      "side": 1,
      "message": "A query on FD close",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f59ca3a_5d523ba9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-15T12:52:59Z",
      "side": 1,
      "message": "Done",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07aac8ff_6a8b1ae5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-15T12:54:16Z",
      "side": 1,
      "message": "Done from my side with the latest changes. +1",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f86da764_dea49859",
        "filename": "dump_entry.cpp",
        "patchSetId": 40
      },
      "lineNbr": 57,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-06-15T18:33:02Z",
      "side": 1,
      "message": "I\u0027ve done a bit of digging but I don\u0027t understand sdeventplus::source::Defer. Will this automatically be called on our next event loop? If so, how do we ensure we don\u0027t close this file descriptor before the caller is done with it?",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "127c9084_da5504c4",
        "filename": "dump_entry.cpp",
        "patchSetId": 40
      },
      "lineNbr": 57,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-06-16T10:52:20Z",
      "side": 1,
      "message": "I was also digging on that, Jay is making a pldm change to test this\nbut when I am testing with busctl getting a different value than in the actual fd\n\n:~# busctl call  xyz.openbmc_project.Dump.Manager  /xyz/openbmc_project/dump/bmc/entry/1 xyz.openbmc_project.Dump.Entry GetFileHandle\n\u003c6\u003e file handle request \u003c- A debug trace\n\u003c6\u003e Request file: /var/lib/phosphor-debug-collector/dumps/1/BMCDUMP.13BE990.0000001.20230616083932 \u003c- Requested for this file\n\u003c3\u003e Value 11 \u003c-- fd value in the server\nh 4 \u003c-- fd value retuned\n:~# \u003c6\u003e File closed file: /var/lib/phosphor-debug-collector/dumps/1/BMCDUMP.13BE990.0000001.20230616083932 fd: 11\n\nso there is a mismatch in this number, I may have to ask around",
      "parentUuid": "f86da764_dea49859",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b5d9d3f_894f012a",
        "filename": "dump_entry.cpp",
        "patchSetId": 40
      },
      "lineNbr": 57,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-06-16T14:02:02Z",
      "side": 1,
      "message": "I think I get it now. When we pass the fd back to the caller, it\u0027s duplicated. So as soon as we are sure they have the new duplicated fd, we close ours using this Defer callback. They can then close their copy of the fd whenever they are done with it. Tricky stuff.",
      "parentUuid": "127c9084_da5504c4",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0edb644_ad86c8f0",
        "filename": "dump_entry.cpp",
        "patchSetId": 40
      },
      "lineNbr": 58,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-15T12:15:08Z",
      "side": 1,
      "message": "If we are closing the FD on our own and any client try to close it on their side separately then what would be the result? Can we do something like\nconst sdbusplus::message::unix_fd\u0026 Entry::getFileHandle() where we take fd as std::unique_ptr\u003cint\u003e fd; ?",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78d1fa53_02f55545",
        "filename": "dump_entry.cpp",
        "patchSetId": 40
      },
      "lineNbr": 58,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-06-15T12:36:05Z",
      "side": 1,
      "message": "what is the advantage of having std::unique_ptr\u003cint\u003e fd when returning across dbus?\n\nand in the client implementations,  clients dup the fd and close it independently so the fd opened by this function will be closed by this function.",
      "parentUuid": "c0edb644_ad86c8f0",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c996a2cc_9660045d",
        "filename": "dump_entry.cpp",
        "patchSetId": 40
      },
      "lineNbr": 58,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-06-15T14:10:09Z",
      "side": 1,
      "message": "this is a D-Bus method cannot return unique_ptr",
      "parentUuid": "78d1fa53_02f55545",
      "revId": "4b6632af3e5f8dc84ff40079623fa734c64fba83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}