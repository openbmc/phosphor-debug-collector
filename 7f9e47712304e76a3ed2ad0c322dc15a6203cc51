{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a42d981c_7b8e31ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2022-10-13T08:05:41Z",
      "side": 1,
      "message": "Design approaches:\nOption 1. Introduce new dump type , which kind of subset type of elog type dump ( refer phosphor-debug-collector/example_errors_watch.yaml xyz.openbmc_project.Common.Error.InternalFailure ). Add new plugin to copy all core files into dump package. Also add important additional info like , journal/ drive in fo etc plugin also in this new dump type.\n   During dump manager application start time check core path and create new elog ( which is unique for capture additional core).  \n   \noption 2: Instead of add new dump type , use user initiated dump and include core files as part of this dump. \nCons: any user initated dump duing boot/runtime and external user i nitated type is going to copy core files. This can lead confusion incase any core dump packaging is in progress. Also usre initaietd dump is heavy weight  and most of the current data is not relevent for debugging problem.\n\noption 3: call core file level core dump packaging. This can lead performance issue in time and resource. same set of journal data is going to be present in all core dumps. \n\n\nIncase of dump quota full use case , i think we don\u0027t need to delete cores from the systemd-core path. Systemd-coredump is alway\u0027s manages directory specific to core path based on the config setting. default is 10% of max size.",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "593fd475_2a2b90bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-10-13T08:19:21Z",
      "side": 1,
      "message": "But what is the problem with the current approach? If there is a core file, a dump will be created for that core once the dump manager gets started.",
      "parentUuid": "a42d981c_7b8e31ee",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d822416_d69abf90",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-10-13T08:29:02Z",
      "side": 1,
      "message": "The only problem I see in this is that checking for cores and creating dumps should happen before deserializing and creating entries. If that is done, dumps will be created for each core, and the entries for those will be created during the restore",
      "parentUuid": "593fd475_2a2b90bc",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfaa2a42_bf0c4b4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2022-10-13T10:22:02Z",
      "side": 1,
      "message": "See comments in line 14.",
      "parentUuid": "2d822416_d69abf90",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "484a9145_65a14808",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-10-13T12:26:35Z",
      "side": 1,
      "message": "It is not broken if called before restore, each core will be processed and created a dump and the entries will be created during the restore",
      "parentUuid": "dfaa2a42_bf0c4b4a",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79da24be_0233e010",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2022-10-13T12:38:49Z",
      "side": 1,
      "message": "See the comment in the code syaing how this is broken from high level.",
      "parentUuid": "484a9145_65a14808",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eac303b5_6cd1d82b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-10-13T12:45:40Z",
      "side": 1,
      "message": "That looks like a bug",
      "parentUuid": "79da24be_0233e010",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2273853c_d3e32563",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-11-17T09:01:25Z",
      "side": 1,
      "message": "there will be only 1 core file, I tested by crashing the debug collector.",
      "parentUuid": "eac303b5_6cd1d82b",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ed10718_641a9fbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-12-05T10:54:49Z",
      "side": 1,
      "message": "I had tested and see that after a core is generated, core dump file is packaged as part of the dump and removed.\n\nDec 05 08:38:55 p10bmc systemd[1]: Started Process Core Dump (PID 4001/UID 0).\nDec 05 08:38:55 p10bmc systemd-coredump[4002]: [ðŸ¡•] Process 4000 (pvm_dump_offloa) of user 0 dumped core.\n\nroot@p10bmc:/var/lib/systemd/coredump# ls\ncore.pvm_dump_offloa.0.c43cfdb15d2b44099942379926cc9301.4000.1670229535000000.zst\nroot@p10bmc:/var/lib/systemd/coredump# ls",
      "parentUuid": "2273853c_d3e32563",
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fa8d41_c3df186b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2022-10-13T08:05:41Z",
      "side": 1,
      "message": "Need to include the additional use case info here.\n\nThis is applicable for core monitor crash use case and any application crashes prior to dump manager service starts.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 18
      },
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea357584_f89269b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-11-17T09:01:25Z",
      "side": 1,
      "message": "core monitor crash should be a different use case and if required should be handled differently, this commit is to cater for debug collector crash",
      "parentUuid": "72fa8d41_c3df186b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 18
      },
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "996cfa7c_8b588181",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-12-06T07:55:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea357584_f89269b1",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 18
      },
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc3c70c2_4b83be2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2022-10-13T08:05:41Z",
      "side": 1,
      "message": "This approch is broken for multiple core dump use cases. \n\nExisting core dump type supports processing only one core not supports multiple core inputs. Also deos the special logic to extract additional information from core dump file.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 30
      },
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a417ef_c18bce04",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-11-17T09:01:25Z",
      "side": 1,
      "message": "what is multiple core dump use cases? this is to cater for only debug-collector itself crashes and generates core, this core will be ignored as the debug-collector is not around.",
      "parentUuid": "dc3c70c2_4b83be2c",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 30
      },
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f68149a_c376bcf5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-12-06T07:55:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3a417ef_c18bce04",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 30
      },
      "revId": "7f9e47712304e76a3ed2ad0c322dc15a6203cc51",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}