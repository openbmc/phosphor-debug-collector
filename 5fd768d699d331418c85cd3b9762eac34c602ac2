{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6853c7af_c768e140",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-01-09T17:55:52Z",
      "side": 1,
      "message": "Unique interfaces for each dump were added for BMCweb to differentiate between dumps, but if the fault log is not having an interface like xyz.openbmc_project.Dump.Entry.BMC then EntryIfacs itself was not needed, right? \n\nWe can get rid of these interfaces if we have a different method to indicate the type of the dump, maybe a dump-type property to the entry.",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32e43ba6_e2300f5d",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-09T18:03:42Z",
      "side": 1,
      "message": "I\u0027m having a little trouble parsing the above, and what it has to do with this patchset.  Can this patchset go forward as-written, or is there some other change that\u0027s needed?",
      "parentUuid": "6853c7af_c768e140",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9359ad00_bb7939c7",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-01-09T18:42:42Z",
      "side": 1,
      "message": "It looks good to me.. but my question was why this virtual public EntryIfaces was added",
      "parentUuid": "32e43ba6_e2300f5d",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820e9a2f_9f768dd8",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-09T18:55:10Z",
      "side": 1,
      "message": "Ah, so roughly the same question I ask in the commit message.",
      "parentUuid": "9359ad00_bb7939c7",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f439410_17096564",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-01-09T19:05:22Z",
      "side": 1,
      "message": "Sure, in the commit message, I read it as to why EntryIfaces are needed, so I was trying to explain why the BMC dump currently requires it.",
      "parentUuid": "820e9a2f_9f768dd8",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50165137_881410f2",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-09T21:44:35Z",
      "side": 1,
      "message": "ACK.",
      "parentUuid": "0f439410_17096564",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd9555c9_5a2cb6b7",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2023-01-10T06:57:31Z",
      "side": 1,
      "message": "I do intend to add the interface xyz.openbmc_project.Dump.Entry.FaultLog (https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Dump/Entry/FaultLog.interface.yaml). Example usage here (WIP): https://gerrit.openbmc.org/c/openbmc/phosphor-debug-collector/+/55934/13/faultlog_dump_entry.hpp",
      "parentUuid": "50165137_881410f2",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e440eee_55fd64b8",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-01-10T08:44:14Z",
      "side": 1,
      "message": "Looks like this double declaration is not really required . I think we can remove this virtual inheritance also here. Discussion related to this. https://stackoverflow.com/questions/23231342/can-you-inherit-the-same-class-twice",
      "parentUuid": "50165137_881410f2",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "698c08c8_e9151673",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-01-10T09:20:29Z",
      "side": 1,
      "message": "Thanks Claire for the inputs. Can you share the plan for getting your changes ready for reveiw?\n\nEd,\n  Are you ok to wait for Claire\u0027s merge or is it blocking your work?",
      "parentUuid": "8e440eee_55fd64b8",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5da311cc_c87cab3a",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-10T17:57:26Z",
      "side": 1,
      "message": "It\u0027s blocking sdbusplus, which is now failing because of the double inheritence (given the destruction no longer override).  While we could back it out, I don\u0027t think this change has any ill effects, and I think can go in?",
      "parentUuid": "698c08c8_e9151673",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca663694_baeebafe",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2023-01-10T19:52:38Z",
      "side": 1,
      "message": "It should be fine to remove Entry\u0027s inheritance from EntryIfaces for now. I\u0027ll be able to add it back when adding the dbus interface xyz.openbmc_project.Dump.Entry.FaultLog, right? (Similar to what we have in bmc_dump_entry.hpp for BMC dump, which I assume does not generate the destructor ordering warning.)",
      "parentUuid": "5da311cc_c87cab3a",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbac178e_3c2f7f30",
        "filename": "faultlog_dump_entry.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-01-11T04:32:42Z",
      "side": 1,
      "message": "correct.",
      "parentUuid": "ca663694_baeebafe",
      "revId": "5fd768d699d331418c85cd3b9762eac34c602ac2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}