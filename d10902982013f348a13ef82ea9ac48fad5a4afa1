{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e53bc181_7fe419cd",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-03-23T08:17:45Z",
      "side": 1,
      "message": "As i mentioned earlier capture dump creates core type for only fisrt core file. \nYou can create iterate through the core files and creates dump accordingly will help to all left over core dumps. incase you are going with custom dump type approch like , copy all availble core files into one dump.\n\nSide effect of this approch is missing journal logs specific to the core pid, ApplicationCored type dump capture pid specifc journal at failing context . this can miss in restore path.",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5095313_c84c9e93",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-03-23T17:58:39Z",
      "side": 1,
      "message": "can\u0027t we fix dreport as it is taking list of files so it should honor that request",
      "parentUuid": "e53bc181_7fe419cd",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3963b00e_4676074d",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-03-24T02:57:30Z",
      "side": 1,
      "message": "dreport plugin is designed to support single core at a time, Basically the dump request trigger is based in file availability.",
      "parentUuid": "e5095313_c84c9e93",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc77033_18e1687c",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-05-27T20:52:18Z",
      "side": 1,
      "message": "Each unrelated core file should be in a separate dump, but creating many dumps here may slow down the starting of the service\nanother approach we can do in the core monitor is to set an event and wait for the dump manager path to be active if it is not available.\nCollecting the left-over core dumps should be the responsibility of the core monitor instead of the dump manager right?",
      "parentUuid": "3963b00e_4676074d",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f341e63_af6010a5",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-05-30T05:46:08Z",
      "side": 1,
      "message": "Discussed generic design approach here https://gerrit.openbmc.org/c/openbmc/phosphor-debug-collector/+/54041/9..30//COMMIT_MSG#b7.  \n\nIncase you want to go with simplest approach , without creating new dump type.\nAnother approch you can look here is \n- Start  obmc-dump-monitor.service , after xyz.openbmc_project.Dump.Manager.service.\n-  In the phosphor-dump-monitor  create individual dumps based on each core\n-  Start core watch activity after dump creation.\n\nSince the core directory size is systemd policy controlled ,  not seeing much  issues related to  performance, like not expecting too many core files present in the path due to application crashes.",
      "parentUuid": "fcc77033_18e1687c",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61b2d77c_1d3a6ce2",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-05-30T12:28:06Z",
      "side": 1,
      "message": "That is what I was suggesting, create the dumps for left over core dumps from the core monitor, not from dump manager",
      "parentUuid": "2f341e63_af6010a5",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5ceb083_09933ac5",
        "filename": "dump_manager_bmc.cpp",
        "patchSetId": 29
      },
      "lineNbr": 380,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-05-30T12:29:14Z",
      "side": 1,
      "message": "And to cover the crash scenario of dump manager, a wait may be needed when the dump manager is not available",
      "parentUuid": "61b2d77c_1d3a6ce2",
      "revId": "d10902982013f348a13ef82ea9ac48fad5a4afa1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}