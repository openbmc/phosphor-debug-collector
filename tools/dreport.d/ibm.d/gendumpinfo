#!/bin/bash

declare -rx DUMP_MANAGER='xyz.openbmc_project.Dump.Manager'
declare -rx HB_DUMP_PATH='/xyz/openbmc_project/dump/hostboot/entry'
declare -rx HW_DUMP_PATH='/xyz/openbmc_project/dump/hardware/entry'
declare -rx SBE_DUMP_PATH='/xyz/openbmc_project/dump/sbe/entry'
declare -rx DUMP_PROP='xyz.openbmc_project.Common.Progress'

#Fetching the driver
declare -x DRIVER=$(cat /etc/os-release | grep VERSION_ID | \
awk -F = '{ print $2}' | cut -d'(' -f 1)
declare -x YAML_FILE="$optional_path/info.yaml"
declare -x ADDL_DATA_PATH="$optional_path/plat_dump/additional_data/"
declare -x START_TIME=''
declare -x END_TIME=''

#Function to get the dump start and completed time
function dump_time_details () {
    if [ "$dump_content_type" = "hbdump" ]; then
        START_TIME=$(busctl get-property $DUMP_MANAGER $HB_DUMP_PATH/$dump_id \
                $DUMP_PROP StartTime | awk '{print $2}')
        END_TIME=$(busctl get-property $DUMP_MANAGER $HB_DUMP_PATH/$dump_id \
                $DUMP_PROP CompletedTime | awk '{print $2}')
    elif [ "$dump_content_type" = "hwdump" ]; then
        START_TIME=$(busctl get-property $DUMP_MANAGER $HW_DUMP_PATH/$dump_id \
                $DUMP_PROP StartTime | awk '{print $2}')
        END_TIME=$(busctl get-property $DUMP_MANAGER $HW_DUMP_PATH/$dump_id \
                $DUMP_PROP CompletedTime | awk '{print $2}')
    elif [ "$dump_content_type" = "sbedump" ]; then
        START_TIME=$(busctl get-property $DUMP_MANAGER $SBE_DUMP_PATH/$dump_id \
                $DUMP_PROP StartTime | awk '{print $2}')
        END_TIME=$(busctl get-property $DUMP_MANAGER $SBE_DUMP_PATH/$dump_id \
                $DUMP_PROP CompletedTime | awk '{print $2}')
    fi

    if [ $? -ne 0 ]; then
        echo "Could not fetch start time for $dump_id"
        return $INTERNAL_FAILURE
    fi

    start=$(date -d @$START_TIME +'%Y-%m-%d %H:%M:%S')
    end=$(date -d @$END_TIME +'%Y-%m-%d %H:%M:%S')
    printf "dump-start-time: %s\n" "$start" >> $YAML_FILE
    printf "dump-end-time: %s\n" "$end" >> $YAML_FILE
}

#Function to fetch additional details
function get_addl_data() {
    if [ -d "$ADDL_DATA_PATH" ]; then
        for entry in "$ADDL_DATA_PATH"/*
            do
                while IFS= read -r line; do
                    echo "$line" >> $YAML_FILE
                done < $entry
            done
    fi
}

#Function to write data to info.yaml file
function write_to_info_file() {
    printf "%s\n" "# SPDX-License-Identifier: GPL-2.0" >> $YAML_FILE
    printf "%s\n" "%YAML 1.2" >> $YAML_FILE
    printf "%s\n\n" "---" >> $YAML_FILE
    printf "generation: p10\n" >> $YAML_FILE
    printf "driver: %s\n" "$DRIVER" >> $YAML_FILE
    dump_time_details
    get_addl_data
}

#Run main
write_to_info_file
