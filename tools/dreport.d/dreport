#! /bin/bash

help=$(cat << EOF
        dreport creates an archive(xz compressed) consisting of the following:
                * Configuration information
                * Debug information
                * A summary report
        The type parameter controls the content of the data. The generated
        archive is stored in the user specified location.

usage: dreport [OPTION]

Options:
        -n, —-name <name>     Name to be used for the archive.
                              Default name format obmcdump_<id>_<epochtime>
        -d, —-dir <directory> Archive directory to copy the compressed report.
                              Default output directory is /tmp
        -i, —-id <id>         Dump identifier to associate with the archive.
                              Identifiers include numeric characters.
                              Default dump identifier is 0
        -t, —-type <type>     Data collection type. Valid types are
                              "user", "core", "elog".
                              Default type is "user" initiated.
        -p, —-path <path>     Optional contents to be included in the archive.
                              Valid paths are absolute file path or d-bus path
                              based on type parameter.
                                 -Absolute file path for "core" type.
                                 -elog d-bus object for "elog" type.
        -s, --size <size>     Maximum allowed size(in KB) of the archive.
                              Report will be truncated in case size exceeds
                              this limit. Default size is unlimited.
        -v, —-verbose         Increase logging verbosity.
        -q, —-quiet           Only log fatal errors to stderr
        -h, —-help            Display this help and exit.
EOF
)

#CONSTANTS
declare -rx TRUE=1
declare -rx FALSE=0
declare -rx UNLIMITED="unlimited"
declare -rx SUMMARY_DUMP="summary"
declare -rx SUMMARY_LOG="summary.log"
declare -rx DREPORT_LOG="dreport.log"
declare -rx TMP_DIR="/tmp"
declare -rx EPOCHTIME=$(date +"%s")
declare -rx TIME_STAMP="date -u"
declare -rx PLUGIN="pl_"
declare -rx DREPORT_SOURCE="/usr/share/dreport.d"
declare -rx DREPORT_INCLUDE="$DREPORT_SOURCE/include.d"
declare -rx ZERO="0"
declare -rx JOURNAL_LINE_LIMIT="500"
declare -rx CUSTOM_PACKAGE="$DREPORT_INCLUDE/package"

#Error Codes
declare -rx SUCCESS="0"
declare -rx INTERNAL_FAILURE="1"
declare -rx RESOURCE_UNAVAILABLE="2"

#VARIABLES
declare -x name=""
declare -x dump_dir="/tmp"
declare -x dump_id="00000000"
declare -x dump_type="user"
declare -x verbose=$FALSE
declare -x quiet=$FALSE
declare -x dump_size="unlimited"
declare -x name_dir=""
declare -x optional_path=""
declare -x dreport_log=""
declare -x summary_log=""
declare -x cur_dump_size=0
declare -x pid=$ZERO
declare -x elog_id=""
declare -x dDay=$(date -d @$EPOCHTIME +'%Y%m%d%H%M%S')
declare -x serialNo=""
declare -x FILE=""
declare -x header_dump_name=""

#Source dreport common functions
. $DREPORT_INCLUDE/functions
. $DREPORT_INCLUDE/opfunctions

# @brief Initiate data collection based on the type.
# @return 0 on success, error code otherwise
function collect_data()
{
    if [[ "$dump_type" == "$SUMMARY_DUMP" ]]; then
        # No data collection is required.
        return
    fi

    plugin_path=$DREPORT_SOURCE/$PLUGIN$dump_type.d

    # check plugin directory for this dump type?
    if [ ! -d $plugin_path ]; then
        log_error "$plugin_path does not exist, skipping dump collection"
        return 0
    fi

    #Executes plugins based on the type.
    for i in $plugin_path/* ; do
        $i
    done
}

# @brief Initial version of the summary log
function init_summary()
{
    log_summary "Name:          $name.tar.xz"
    log_summary "Epochtime:     $EPOCHTIME"
    log_summary "ID:            $dump_id"
    log_summary "Type:          $dump_type"
}

# @brief Check the validity of user inputs and initialize global
#        variables. Create directory for temporary data collection
# @return 0 on success, error code otherwise

function initialize()
{
    #Dump file name
    if [ -z $name ]; then
        name=$"obmcdump_"$dump_id"_$EPOCHTIME"
    fi

    #Create temporary data directory.
    mkdir -p "$TMP_DIR/$name"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to create the temporary directory."
        return $RESOURCE_UNAVAILABLE;
    fi

    #name directory
    name_dir="$TMP_DIR/$name"

    #dreport log file
    dreport_log="$name_dir/$DREPORT_LOG"

    #summary log file
    summary_log="$name_dir/$SUMMARY_LOG"

    # Validate dump type by checking if plugin directory exists
    plugin_path="$DREPORT_SOURCE/$PLUGIN$dump_type.d"
    if [ ! -d "$plugin_path" ]; then
        log_error "Invalid dump type: $dump_type. Only summary log is available."
        dump_type=$SUMMARY_DUMP
    fi

    #Size
    #Check the input is integer.
    if [ "$dump_size" -eq "$dump_size" ] 2>/dev/null; then
        #Converts in to bytes.
        dump_size="$((dump_size * 1024))"
    else
        dump_size=$UNLIMITED
    fi

    return $SUCCESS
}

# @brief Packaging the dump and transferring to dump location.
function package()
{
    mkdir -p "$dump_dir"
    if [ $? -ne 0 ]; then
        log_error "Could not create the destination directory $dump_dir"
        dest_dir=$TMP_DIR
    fi

    #tar and compress the files.
    if [ -f "$CUSTOM_PACKAGE" ]; then
        ("$CUSTOM_PACKAGE")
        return "$SUCCESS"
    else
        tar -Jcf "$name_dir.tar.xz" -C \
            "$(dirname "$name_dir")" "$(basename "$name_dir")"

        # shellcheck disable=SC2181 # need output from `tar` in above if cond.
        if [ $? -ne 0 ]; then
            echo "$($TIME_STAMP)" "Could not create the compressed tar file"
            rm -r "$name_dir"
            return "$INTERNAL_FAILURE"
        fi

        #remove the temporary name specific directory
        rm -r "$name_dir"

        echo "$($TIME_STAMP)" "Report is available in $dump_dir"

        if [ "$TMP_DIR" == "$dump_dir" ] || [ "$TMP_DIR/" == "$dump_dir" ]; then
            return "$SUCCESS"
        fi

        #copy the compressed tar file into the destination
        cp "$name_dir.tar.xz" "$dump_dir"
        if [ $? -ne 0 ]; then
            echo "Failed to copy the $name_dir.tar.xz to $dump_dir"
            rm "$name_dir.tar.xz"
            return "$INTERNAL_FAILURE"
        fi

        rm "$name_dir.tar.xz"
    fi
}

# @brief Main function
function main()
{
    #initialize the global variables and
    #create temporary storage locations
    initialize
    result=$?
    if [[ ${result} -ne $SUCCESS ]]; then
        echo $($TIME_STAMP) "Error: Failed to initialize, Exiting"
        exit;
    fi

    #Initialize the summary log
    init_summary

    #collect data based on the type.
    collect_data

    package  #package the dump
    result=$?
    if [[ ${result} -ne $SUCCESS ]]; then
        echo $($TIME_STAMP) "Error: Failed to package, Exiting"
    else
        echo $($TIME_STAMP) "Successfully completed"
        exit;
    fi
}

TEMP=`getopt -o n:d:i:t:s:p:vqh \
    --long name:,dir:,dumpid:,type:,size:,path:,verbose,quiet,help \
    -- "$@"`

if [ $? -ne 0 ]
then
    echo "Error: Invalid options"
    exit 1
fi

eval set -- "$TEMP"

while [[ $# -gt 1 ]]; do
    key="$1"
    case $key in
        -n|--name)
            name=$2
            shift 2 ;;
        -d|--dir)
            dump_dir=$2
            shift 2 ;;
        -i|--dumpid)
            dump_id=$2
            shift 2 ;;
        -t|--type)
            dump_type=$2
            shift 2 ;;
        -s|--size)
            dump_size=$2
            shift 2 ;;
        -p|--path)
            optional_path=$2
            shift 2 ;;
        -v|--verbose)
            verbose=$TRUE
            shift ;;
        -q|--quiet)
            quiet=$TRUE
            shift ;;
        -h|--help)
            echo "$help"
            exit ;;
        *) # unknown option
            log_error "Unknown argument: $1"
            log_info "$help"
            exit 1 ;;
    esac
done

main #main program
exit $?
