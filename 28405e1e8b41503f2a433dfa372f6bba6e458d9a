{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "85d178cd_a2cf1608",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "This",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 4
      },
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fb88069_35985740",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85d178cd_a2cf1608",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 4
      },
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3646a181_2864b1b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "Section doesn\u0027t make sense",
      "range": {
        "startLine": 9,
        "startChar": 62,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e03f7209_8eeb6fa8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Modified",
      "parentUuid": "3646a181_2864b1b7",
      "range": {
        "startLine": 9,
        "startChar": 62,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0274ff85_e51f1158",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "Overall I\u0027m finding this difficult to process. Maybe a little more background on what error types are and how they\u0027re used?",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652b77a4_dec7130a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "I added what is error type and why it should be considered as dump type too",
      "parentUuid": "0274ff85_e51f1158",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd48a8d5_e1509696",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "generate",
      "range": {
        "startLine": 22,
        "startChar": 59,
        "endLine": 22,
        "endChar": 66
      },
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ef112fa_eef67ee7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd48a8d5_e1509696",
      "range": {
        "startLine": 22,
        "startChar": 59,
        "endLine": 22,
        "endChar": 66
      },
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd2dd90e_9dd44599",
        "filename": "dump_types.mako.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "nit: define functions in cpp file in same order they are in hpp",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "133b1b44_2ef945c8",
        "filename": "dump_types.mako.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd2dd90e_9dd44599",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c93fdf9_216975b0",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "I\u0027m a bit confused on why we need this new check. There are situations where values in the DUMP_TYPE_TABLE can overlap with values in the ERROR_TYPE_DICT? Why is that?",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee1d5657_1c6ac7de",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Yes the each error type is considered as a dump type for eacmple elog error type is given as elog dump type and checkstop error type is checkstop dump type too. Updated commit message also",
      "parentUuid": "7c93fdf9_216975b0",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79f87365_41dd0282",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-14T19:04:53Z",
      "side": 1,
      "message": "At a high level does this make sense to you? A checkstop dump to me is a dump that collects host/bios related data. Maybe the BMC also logs an error to indicate it has detected a checkstop and that generates a BMC dump. But those are 2 different dumps. Why not a checkstop and checkstop_bmc so we don\u0027t have this weird overlap issue?",
      "parentUuid": "ee1d5657_1c6ac7de",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cb93ca2_497c3e58",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-14T23:53:20Z",
      "side": 1,
      "message": "Checkstop dump not making a clash, the elog is the problem, elog is used as an error log dump and for InternalFailure too, maybe I should change the type for InternalFailure from \u0027elog\u0027 to \u0027internalfailure\u0027 but that change is only in the yaml.",
      "parentUuid": "79f87365_41dd0282",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6076b52_d6d1bb61",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-15T12:42:53Z",
      "side": 1,
      "message": "Yeah I\u0027m just not getting it here. In my mind, either all BMC dumps generated by error logs are a single type of BMC dump, or all BMC dumps generated by error logs are separate BMC dump types. Either way, there shouldn\u0027t be any duplication to worry about.",
      "parentUuid": "3cb93ca2_497c3e58",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c1a123c_6dd9f4b0",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-08-16T09:22:25Z",
      "side": 1,
      "message": "checkstop type are consumed by openpower boxes. Refer \nhttps://github.com/openbmc/openbmc/blob/master/meta-openpower/recipes-phosphor/dump/phosphor-debug-errors-native/errors_watch.yaml.\nFor IBM specific boxes , checkstop type dump is also using error log type dump infrastructure to watch the error logs. \nAt a high level elog type is used to capture general error log type dump data , which includes journal( limited) and addition base dump info.\nCheckstop captures cutsom information like host specific info and elog type.\nThe design direction we followed  is close to your statement  \"all BMC dumps generated by error logs are separate BMC dump types.\". Like errors which doesn\u0027t need custom data use  elog type or use custom type for any custom data collection case.",
      "parentUuid": "d6076b52_d6d1bb61",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b1ed6a0_1bd6e11b",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-16T11:09:36Z",
      "side": 1,
      "message": "\"Like errors which doesn\u0027t need custom data use elog type or use custom type for any custom data collection case.\"\nThat was the original change, if type elog is mentioned and no subtype is mentioned collect the default elog dump or the specific elog type. \nBased on the review comment I changed that.\n\nso we can do either of these\n- In the bus call dump type as elog and if there is no additional type, collect default dump, or if something is specified collect the particular dump\n\n- keep the current behavior, elog for InternalFailure, and for other error logs need to specify the type. Current behavior means whatever is merged and in this review \n\nis this documented anywhere?\n\"Like errors which doesn\u0027t need custom data use elog type or use custom type for any custom data collection case.\"",
      "parentUuid": "0c1a123c_6dd9f4b0",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "584d2554_15e52c9f",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "Should have doxygen for new functions",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79862b96_38e95518",
        "filename": "dump_types.mako.hpp",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "584d2554_15e52c9f",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28aa794b_d79c2eae",
        "filename": "map_gen.py",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-03T19:54:35Z",
      "side": 1,
      "message": "This feels a bit awkward. Either define specific names for yaml1 and yaml2 or just support multiple -i inputs for multiple yaml files.",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1b4231f_35688d39",
        "filename": "map_gen.py",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-04T08:22:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28aa794b_d79c2eae",
      "revId": "28405e1e8b41503f2a433dfa372f6bba6e458d9a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}