// This file was autogenerated.  Do not edit!
// See elog-gen.py for more details
#pragma once

#include <string>
#include <tuple>
#include <type_traits>
#include <sdbusplus/exception.hpp>
#include <phosphor-logging/log.hpp>
#include <phosphor-logging/elog.hpp>

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace Dump
{
namespace Monitor
{
namespace Error
{
    struct InvalidCorePath;
} // namespace Error
} // namespace Monitor
} // namespace Dump
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus


namespace phosphor
{

namespace logging
{

namespace xyz
{
namespace openbmc_project
{
namespace Dump
{
namespace Monitor
{
namespace _InvalidCorePath
{

struct PATH
{
    static constexpr auto str = "PATH=%s";
    static constexpr auto str_short = "PATH";
    using type = std::tuple<std::decay_t<decltype(str)>,const char*>;
    explicit constexpr PATH(const char* a) : _entry(entry(str, a)) {};
    type _entry;
};

}  // namespace _InvalidCorePath

struct InvalidCorePath
{
    static constexpr auto L = level::ERR;
    using PATH = _InvalidCorePath::PATH;
    using metadata_types = std::tuple<PATH>;

};

} // namespace Monitor
} // namespace Dump
} // namespace openbmc_project
} // namespace xyz


namespace details
{

template <>
struct map_exception_type<sdbusplus::xyz::openbmc_project::Dump::Monitor::Error::InvalidCorePath>
{
    using type = xyz::openbmc_project::Dump::Monitor::InvalidCorePath;
};

}


} // namespace logging

} // namespace phosphor
