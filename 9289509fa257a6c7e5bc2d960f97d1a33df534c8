{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "412f1b79_d53af293",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-23T07:07:08Z",
      "side": 1,
      "message": "With this change, I am not sure if the inherited objects (e.g. bmc_dump_entry) should keep using `defer_emit` or should be modified to use `emit_no_signals`?",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ed68935_6be4498f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-11-23T12:48:11Z",
      "side": 1,
      "message": "This commit is not correct as-is.  Something else must be going on.\n\nWhat kind of Entry was it you were having trouble with?  A `bmc_dump_entry.hpp:Entry`?\n\nThe constructor of dump_entry::Entry purposefully does no-emit because the expectation is that it is always inherited from (with additional interfaces added).\nThe bmc::Entry correctly does defer-emit and then at the end of the constructor does an `emit_object_added` call, which will trigger the creation signals.  Having called `emit_object_added` it should also trigger the destruction signals when the object is destructed.  This is what you don\u0027t seem to be seeing?",
      "parentUuid": "412f1b79_d53af293",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71ded2f4_470fb911",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-24T05:22:30Z",
      "side": 1,
      "message": "\u003e it should also trigger the destruction signals when the object is destructed.  This is what you don\u0027t seem to be seeing?\n\nNo, it\u0027s not working as expected. As noted in the \"Tested\", the destruction does not emit signal, that leaves the mapper still see the object, while it\u0027s gone on DBus.\n\nYou should be able to reproduce the issue by just creating a dump and delete it.",
      "parentUuid": "2ed68935_6be4498f",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c80b8fa_b3f67629",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2022-11-24T06:36:41Z",
      "side": 1,
      "message": "As mentioend by Patrick , https://gerrit.openbmc.org/c/openbmc/phosphor-debug-collector/+/40518 is used for this support.  @dhruvaraj verified also.",
      "parentUuid": "71ded2f4_470fb911",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b0df710_e8db5c1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-24T06:45:44Z",
      "side": 1,
      "message": "Could you help to confirm the signal for the destruction of the dump entries?",
      "parentUuid": "9c80b8fa_b3f67629",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5940cf13_cbf8dbdf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-11-24T06:59:32Z",
      "side": 1,
      "message": "I attempted to create a BMC dump and delete it, and the interface removed signal is coming, please provide details\n\nâ€£ Type\u003dsignal  Endian\u003dl  Flags\u003d1  Version\u003d1 Cookie\u003d96  Timestamp\u003d\"Thu 2022-11-24 06:56:06.070563 UTC\"\n  Sender\u003d:1.116  Path\u003d/xyz/openbmc_project/dump  Interface\u003dorg.freedesktop.DBus.ObjectManager  Member\u003dInterfacesRemoved\n  UniqueName\u003d:1.116\n  MESSAGE \"oas\" {\n          OBJECT_PATH \"/xyz/openbmc_project/dump/bmc/entry/2\";\n          ARRAY \"s\" {\n                  STRING \"org.freedesktop.DBus.Peer\";\n                  STRING \"org.freedesktop.DBus.Introspectable\";\n                  STRING \"org.freedesktop.DBus.Properties\";\n                  STRING \"xyz.openbmc_project.Dump.Entry.BMC\";\n                  STRING \"xyz.openbmc_project.Common.GeneratedBy\";\n          };\n  };",
      "parentUuid": "3b0df710_e8db5c1d",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e676b679_984b9316",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-24T09:50:30Z",
      "side": 1,
      "message": "Tried to monitor the signal, it does emit the above signal, but mapper still does not erase the object.\nChecking the code https://github.com/openbmc/phosphor-objmgr/blob/master/src/main.cpp#L764, it does only erase the interfaces, and because the above signal does not indicate that all interfaces are removed, it still keep the object `/xyz/openbmc_project/dump/bmc/entry/2`.\n\nTo properly make mapper to erase the object, a service should emit \"interfacesRemoved\" signal for **all** the interfaces. With `emit_no_signals` here, it fails to do so and cause the issue.\n\n@Patrick @Dhruvaraj",
      "parentUuid": "5940cf13_cbf8dbdf",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3866fa75_e1705c7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-12-13T05:11:19Z",
      "side": 1,
      "message": "@Patrick could you comment on the above scenario?",
      "parentUuid": "e676b679_984b9316",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40377f3b_774f298b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-15T18:03:14Z",
      "side": 1,
      "message": "What interfaces were not emitted by an \"emit_object_removed\" in the parent class?  I am not understanding what the scope of the bug is.  I see a busctl monitor output from Dhruv and he says it appears to be working, but I don\u0027t see data from you (Lei YU) on what is not working on your machine.  What interface is still left around in \"entry/2\"?",
      "parentUuid": "3866fa75_e1705c7a",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bc51dd7_3754f9f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-12-16T02:14:25Z",
      "side": 1,
      "message": "We do see below interfaces are removed via InterfacesRemoved signal:\n```\n                 STRING \"org.freedesktop.DBus.Peer\";\n                  STRING \"org.freedesktop.DBus.Introspectable\";\n                  STRING \"org.freedesktop.DBus.Properties\";\n                  STRING \"xyz.openbmc_project.Dump.Entry.BMC\";\n                  STRING \"xyz.openbmc_project.Common.GeneratedBy\";\n```\nBut the object has other interfaces:\n```\nxyz.openbmc_project.Common.OriginatedBy\nxyz.openbmc_project.Common.Progress\nxyz.openbmc_project.Dump.Entry\nxyz.openbmc_project.Object.Delete\nxyz.openbmc_project.Time.EpochTime\n```\n\nThese interfaces do not emit InterfacesRemoved signal.\n\nAnd see mapper\u0027s code https://github.com/openbmc/phosphor-objmgr/blob/master/src/main.cpp#L764, as long as an object has interfaces, the object is not deleted.\n\nSo this results in the inconsistency between DBus and mapper:\n* The object is deleted on DBus, part of the interfaces emit removed signal.\n* mapper keeps the object because not all the interfaces are removed.",
      "parentUuid": "40377f3b_774f298b",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f117b59_3e5b53ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T12:54:17Z",
      "side": 1,
      "message": "What is this \"Common.GeneratedBy\" that you and Dhruv are referring to?  Do you two have some downstream patches that aren\u0027t available?  I don\u0027t see that interface in either PDI or this repository, so it\u0027s really hard to debug this for you.",
      "parentUuid": "2bc51dd7_3754f9f7",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1f6a1df_7ff29ca7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T12:59:05Z",
      "side": 1,
      "message": "I suspect part of the issue is that the bmc::Entry class has \"virtual children\" but not a virtual destructor.  There is likely something funny going on with this diamond inheritance structure.",
      "parentUuid": "8f117b59_3e5b53ac",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e853bc3_00340524",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-12-21T13:23:21Z",
      "side": 1,
      "message": "Yes Patrick there are downstream commits, but that is mostly for open power dumps and Common.GeneratedBy is already in the master right?",
      "parentUuid": "e1f6a1df_7ff29ca7",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3f5e537_d3a8f093",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-12-21T13:38:42Z",
      "side": 1,
      "message": "destructors are declared as\n~Entry() \u003d default;\nchanging to virtual ~Entry() \u003d default;  should fild?",
      "parentUuid": "1e853bc3_00340524",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "983bd965_5925ba4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T14:02:32Z",
      "side": 1,
      "message": "\u003e Common.GeneratedBy is already in the master right?\n\nIt is not.\n\n\u003e There is likely something funny going on with this diamond inheritance structure.\n\nI hacked at this a bit so I could run the constructor/destructor and see what was going on.  The issue is that the `phosphor::dump::Entry` destructor runs before the `EntryIfaces`, but `EntryIfaces` is what we called emit_object_added on.  The result is that the `dump::Entry` destructor has already cleaned up the sd_bus slots and sd_bus doesn\u0027t know anything about that interface anymore by the time the `emit_object_removed` is called.\n\nSomething needs to be adjusted in either the inheritance order or which underlying interface(s) we call `emit_object_added` against.  The `emit_object_added` needs to be called on the first object_t to be destructed.",
      "parentUuid": "e3f5e537_d3a8f093",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e1778f8_6cccdbc5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2022-12-21T14:13:01Z",
      "side": 1,
      "message": "sorry, Common.OriginatedBy is in master, not GeneratedBy\n\nThanks Patrick, got the issue, will do some experiments with changes",
      "parentUuid": "983bd965_5925ba4b",
      "revId": "9289509fa257a6c7e5bc2d960f97d1a33df534c8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}