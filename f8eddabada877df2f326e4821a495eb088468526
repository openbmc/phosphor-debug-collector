{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4138aaf0_63713ba7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-07-11T22:05:29Z",
      "side": 1,
      "message": "Hi Deepa. Firstly, thanks for reworking the patch to use the libpldm APIs. This helps Rashmica out a lot with one less application for her to convert on her way to enabling in-kernel MCTP. That said, I have a few concerns that I\u0027ve outlined in the comments.",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce0e8cb8_8721b8ff",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 28,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T14:09:13Z",
      "side": 1,
      "message": "Please add more documentation",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 28,
        "endChar": 44
      },
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c8a4e5c_6270545a",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T10:52:18Z",
      "side": 1,
      "message": "Why we need to make this class if we are not reusing instanceid?",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0c1aa27_9f20158f",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "RAII",
      "parentUuid": "1c8a4e5c_6270545a",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4826a5_c5599031",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T14:09:13Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "f0c1aa27_9f20158f",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04f3936c_73936f2e",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-07-11T22:05:29Z",
      "side": 1,
      "message": "I think use of RAII is questionable, as the resource being controlled (the instance ID) is extracted via the `getInstanceID()` method anyway. This opens it up to life-cycle violations, which is the kind of bug that RAII is meant to help manage.\n\nWe might as well just add the calls to allocate and free in the appropriate places. Overall I think that would also reduce the size of the patch. The size of the patch surprised me.",
      "parentUuid": "5b4826a5_c5599031",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7110add3_9bb19bcf",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "rephrase",
      "range": {
        "startLine": 35,
        "startChar": 45,
        "endLine": 35,
        "endChar": 75
      },
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23104603_91fb6fa2",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 37,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T14:09:13Z",
      "side": 1,
      "message": "Need to add the exception details",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "702415b5_8c706fd1",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-07-11T22:05:29Z",
      "side": 1,
      "message": "We should not call this type `PLDMInstanceIdDb` if it maintains its current implementation. The object only ever allocates a single instance ID during its construction. This means it does not represent a database, it represents the actual allocated instance ID itself. Naming it `PLDMInstanceIdDb` is confusing given the implementation and is the kind of thing that will cause bugs.\n\nIf you really must have this implementation (where an instance ID is allocated in the constructor) then you must also rename the class to `PLDMInstanceId` (drop the `Db` suffix). Naming it `PLDMInstanceId` will tell the reader that an instance represents exactly one instance ID.",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04da4edb_0fec0751",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 41,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-07-11T22:05:29Z",
      "side": 1,
      "message": "It concerns me that we are setting up and tearing down the database for every ID allocation. BMCs aren\u0027t fast - this is unnecessary overhead and every operation counts. More importantly this makes any test cases interfere with the instance ID database of the system the tests are being run on.\n\nI suggest the database instance be passed into the constructor here as a dependency via a reference or pointer. The database itself should be instantiated in `main()`, as this is where the choice of the DB configuration matters (global database vs test-specific). If the code structure doesn\u0027t support that then it suggests the code needs some refactoring such that it can.\n\nHere\u0027s pldmd\u0027s approach:\n\nhttps://github.com/openbmc/pldm/blob/master/pldmd/pldmd.cpp#L201-L203\n\nThe `InstanceIdDb` class wraps up the libpldm APIs:\n\nhttps://github.com/openbmc/pldm/blob/master/pldmd/instance_id.hpp#L21\n\nReturning to the point on test cases, they should be implemented using an instance ID database instantiated using `pldm_instance_db_init()`. This way we can provide a path to a test-specific (temporary) database file and prevent interference with the system\u0027s global instance ID database. The pldmd codebase has an example of a class that provides this behaviour:\n\nhttps://github.com/openbmc/pldm/blob/master/test/test_instance_id.hpp",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fce529a_6f6bc399",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 47,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "we can add the implementation of allocateInstanceId directly here for clarity,that method is not called else where to say for reuse.",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 26
      },
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02a0e534_99ef79f3",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 56,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "we can add the implementation of freeInstanceId directly here for clarity,that method is not called else where to say for reuse.",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "537e4d87_9bc06e1f",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 56,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T14:09:13Z",
      "side": 1,
      "message": "if we have to call freeinstanceid explicitly then there no use of RAII class",
      "parentUuid": "02a0e534_99ef79f3",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e89375de_2f08834d",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 71,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-07-11T22:05:29Z",
      "side": 1,
      "message": "At this point the ID is no-longer properly managed via RAII. Because of this I don\u0027t think RAII is actually helping in this case.",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6455326b_2cbf5ad6",
        "filename": "host-transport-extensions/pldm/common/pldm_utils.hpp",
        "patchSetId": 10
      },
      "lineNbr": 110,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "not recommended to throw exceptions from destructor as this method is called from destructor, if essential we need to add this to a public method and call it and caller should catch exception.\n\nifstream\nThe close() method can potentially throw an exception. The destructor calls close() if the file has been opened but makes sure that any exceptions do not propagate out of the destructor.\n\nSo if the user of a file object wants to do special handling for problems associated to closing the file they will manually call close() and handle any exceptions. If on the other hand they do not care then the destructor will be left to handle the situation.",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 110,
        "endChar": 69
      },
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0df22362_7f61f59f",
        "filename": "host-transport-extensions/pldm/oem/ibm/pldm_oem_cmds.cpp",
        "patchSetId": 10
      },
      "lineNbr": 120,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-07-11T22:05:29Z",
      "side": 1,
      "message": "The current implementation of `getInstanceID()` always returns the same ID, as the ID it returns is allocated in the object constructor. If `pldmInstanceIdDb` truly represents the database then `getInstanceID()` must always allocate a newly available instance ID for each call. `getInstanceID()` must never reuse an allocated instance ID, no matter the context. Doing so entirely defeats their purpose (disambiguation of requests at the protocol level). See the commentary around instance IDs in sections 6.1 and 6.3 of DSP0240 (PLDM Base Specification) v1.0.0.",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02ef87a8_2c084212",
        "filename": "host-transport-extensions/pldm/oem/ibm/pldm_oem_cmds.cpp",
        "patchSetId": 10
      },
      "lineNbr": 133,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T10:52:18Z",
      "side": 1,
      "message": "Nee to log unavailable here, originally we were throwing NotAllowed if we can\u0027t continue, but unavailable can be more suitable. or you can throw NotAllowed and changing to unavailable can be a separate commit",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85d9df4c_00ce4b77",
        "filename": "host-transport-extensions/pldm/oem/ibm/pldm_oem_cmds.cpp",
        "patchSetId": 10
      },
      "lineNbr": 133,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "+1 encode_set_numeric_effecter_value_req this method does not throw any exceptions it is C code but I guess you added as PLDMInstanceIdDb can throw exceptions",
      "parentUuid": "02ef87a8_2c084212",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af527bfe_fa335432",
        "filename": "host-transport-extensions/pldm/oem/ibm/pldm_oem_cmds.cpp",
        "patchSetId": 10
      },
      "lineNbr": 204,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-07-11T10:52:18Z",
      "side": 1,
      "message": "We wont be able to continue if there is a failure in getting instance id, need to return unavailable",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42d423c0_eebc7470",
        "filename": "host-transport-extensions/pldm/oem/ibm/pldm_oem_cmds.cpp",
        "patchSetId": 10
      },
      "lineNbr": 204,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-07-11T13:55:36Z",
      "side": 1,
      "message": "+1 also this encode_file_ack_req is C code will not throw any exceptions I guess you added as PLDMInstanceIdDb can throw exceptions",
      "parentUuid": "af527bfe_fa335432",
      "revId": "f8eddabada877df2f326e4821a495eb088468526",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}